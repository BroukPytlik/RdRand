.\" Manpage for rdrand-gen.
.\" Contact jan@tulak.me to correct errors or typos.
.TH man 7 "25 November 2013" "1.0" "rdrand-gen man page"
.SH NAME
rdrand-gen \- Generate randomness by using RdRand on Intel's CPUs.
.SH SYNOPSIS
rdrand-gen [--amount NUM] [--method NAME] [--output FILE] [--threads NUM]
.SH DESCRIPTION
RdRand is an instruction for returning random numbers from an Intel on-chip hardware random number generator. RdRand is available on Ivy Bridge and later processors.

It uses cascade construction, combining a HW RNG operating at 3Gbps with CSPRNG with all components sealed on CPU. The entropy source is a metastable circuit, with unpredictable behavior based on thermal
noise. The entropy is fed into a 3:1 compression ratio entropy extractor (whitener) based on AES-CBC-MAC. Online statistical tests are performed at this stage and only high quality random data are used as the seed for cryptograhically secure SP800-90 AES-CTR DRBG compliant PRNG.
This generator is producing maximum of 512 128-bit AES blocks before it's reseeded. According to documentation the 512 blocks is a upper limit for reseed, in practice it reseeds much more frequently.

Despite the statistical tests did not reveal any flaws in RdRand's output, it's intern operation cannot be verified (with a possibility for the backdoor to be built into it).


rdrand-gen is a simple application for generating randomness on Intel's CPUs (Ivy Bridge and newers) using the HW RNG on the CPU.
It can use three methods of generating:
Default 
.B get_bytes
- is fastest (on a laptop with a Core i7 about 200 MiB/s in one thread) and simply pulls out randomness from the HW RNG, and two slow, but more secure methods. These two methods, 
.B reseed_delay
and 
.B reseed_skip
are enforcing full regeneration of the CPU's pool before each single value that is pushed out.

.B reseed_delay
is putting small delays (20 microseconds), long enough to allow the HW to reseed the RdRand's internal generator with new thermal noise based entropy so that two consequent values returned by reseed_delay are guaranteed to be produced with different seed.
.B reseed_skip
is taking one of 1025 64bit values (the size of the inner pool) and throwing away the rest, forcing the HW to reseed.
The perfomance of these reseeding methods is about 1/1000 of the default one. The performance differs on each machine, one one machine the 
.B reseed_skip
is faster than 
.B reseed_delay
, while on another one it can be different.
.SH OPTIONS
  \-\-help       \-h      Print this help.
  \-\-amount     \-n 
.I NUM 
Generate given amount of bytes. Suffixes: K, M, G, T. Without the option or when 0, generate unlimited amount.
  \-\-method     \-m 
.I NAME
Use method NAME (default is 
.B get_bytes
, others are 
.B reseed_skip
and
.B reseed_delay
).
  \-\-output     \-o 
.I FILE
Save the generated data to the file.
  \-\-threads    \-t 
.I NUM
Run the generator in NUM threads (default 2).
.SH EXAMPLES
rdrand-gen 
.B -n 10.5M -o /tmp/random
.br
       # Write 10.5MB of random data to the file /tmp/random

(rdrand-gen
.B -n2k -m reseed_skip 
| tr -cd '[:alnum:]' | fold -w 20 && echo ) | head -20
.br
       # Generate 20 random passwords of length 20 build from all letters
       # and digits. Use the secure get_uint64_array_reseed_skip method.

rdrand-gen 
.B -n3705 -m reseed_skip 
| uuencode -m - | head -n 66 | tail -n 65 | \\
.br
gpg --symmetric -a > keyfile.gpg
.br
       # Create  GPG encrypted keyfile for aespipe. 
       # Encrypt: 
       # tar -cvf - files... | bzip2 | aespipe -w 10 -K keyfile.gpg >archive.aes
       # Decrypt: 
       # aespipe -d -K keyfile.gpg < /tmp/archive.aes | bzip2 -d -q | tar -tvf -

rdrand-gen | aespipe -v -P <(head -n 3705 /dev/random | uuencode -m - | \\
.br
head -n 66 | tail -n 65) | cat -A
.br
       # Harden the RdRand output with aespipe. aespipe will use keyfile based 
       # on /dev/random and encrypt rdrand-gen output. It will mitigate any 
       # back-door possibly built into RdRand.

rdrand-gen | dieharder -g 200 -a
.br
       # Test the randomness of the generated data with dieharder test suite

rdrand-gen | pv > /dev/null
.br
       # Measure the speed of generation.

.SH SEE ALSO
librdrand(3)
.SH BUGS
No known bugs.
.SH AUTHOR
Jan Tulak (jan@tulak.me)
Jiri Hladky (hladky.jiri@gmail.com)
