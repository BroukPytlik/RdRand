.\" Manpage for rdrand-gen.
.\" Contact jan@tulak.me to correct errors or typos.
.TH man 3 "25 November 2013" "1.0" "rdrand-gen man page"
.SH NAME
librdrand \- Library for generating random values by using RdRand on Intel's CPUs.
.SH SYNOPSIS
.B #include <librdrand.h>

.B int rdrand_testSupport();

.BI "int rdrand16_step(uint16_t *" x ");"
.br
.BI "int rdrand32_step(uint32_t *" x ");"
.br
.BI "int rdrand64_step(uint64_t *" x ");"


.BI "int rdrand_get_uint16_retry(uint16_t *" dest ", int " retry_limit ");"
.br
.BI "int rdrand_get_uint32_retry(uint32_t *" dest ", int " retry_limit ");"
.br
.BI "int rdrand_get_uint64_retry(uint64_t *" dest ", int " retry_limit ");"


.BI "unsigned int rdrand_get_uint8_array_retry(uint8_t *" dest ",  const unsigned int " count ", int " retry_limit ");"
.br
.BI "unsigned int rdrand_get_uint16_array_retry(uint16_t *" dest ", const unsigned int " count ", int " retry_limit ");"
.br
.BI "unsigned int rdrand_get_uint32_array_retry(uint32_t *" dest ", const unsigned int " count ", int " retry_limit ");"
.br
.BI "unsigned int rdrand_get_uint64_array_retry(uint64_t *" dest ", const unsigned int " count ", int " retry_limit ");"

.BI "size_t rdrand_get_bytes_retry(void *" dest ", const size_t " size ", int " retry_limit ");"

.BI "unsigned int rdrand_get_uint64_array_reseed_delay(uint64_t *" dest ", const unsigned int " count ", int " retry_limit ");"
.br
.BI "unsigned int rdrand_get_uint64_array_reseed_skip(uint64_t *" dest ", const unsigned int " count ", int " retry_limit ");"

.BI "size_t rdrand_fwrite(FILE *" f ", const size_t " count ", int " retry_limit ");"


.SH DESCRIPTION
The rdrand-lib is a library for generating random values on Intel CPUs (Ivy Bridge and newers) using the HW RNG on the CPU.
As the HW RNG is only on newer Intel CPUs, the library contain
.BR rdrand_testSupport ()
function for testing the availability. Return values are 
.I RDRAND_SUPPORTED
or
.I RDRAND_UNSUPPORTED.

All generating functions saves the random values to the location specified in 
.IR *dest / *x
pointer, the value is never returned directly.

The 
.BR rdrandXX_step ()
functions are just a wrappers, shileding the user from the using of ASM instruction. These functions returns 
.I RDRAND_SUCCESS
if the random 16, 32 or 64-bit value was sucessfuly saved into given pointer, or
.I RDRAND_FAILURE
if it wasn't. Note, that on current CPUs (this may change in future CPUs), the CPU always take 64-bit value and throw away the unused part.

The
.BR rdrand_get_uintXX_retry ()
functions works similar to
.BR rdrandXX_step ,
but uses one aditional parameter 
.IR retry_limit .
Returns 
.I RDRAND_SUCCESS
or
.IR RDRAND_FAILURE .

The 
.I retry_limit
argument, same also for all the following functions, means that the function will try up to the given number to repeat the generating if for some reason the HW RNG will not generate anything (for example because it was sucked dry and needs to refill its inner pool). If a negative value is passed, the function will use default value with which the library was compiled.

The set of 
.BR rdrand_get_uintXX_array_retry ()
functions fills an array on 
.I dest
of specified length 
.I count
of XX-bits values by randomness. Returns number of 
.B bytes
sucessfuly acquired.

.BR rdrand_get_bytes_retry ()
function is almost the same as 
.BR rdrand_get_uint8_array_retry (),
but with benefit of memory-alignment. That means, in most situations, there is almost no difference between 
.BR rdrand_get_bytes_retry ()
and 
.BR rdrand_get_uintXX_array_retry ()
functions, but if the filled area is not correctly aligned in memory, the
.BR rdrand_get_bytes_retry ()
offers the best performance.

The two reseed functions (
.BR rdrand_get_uint64_array_reseed_delay ()
and
.BR rdrand_get_uint64_array_reseed_skip ())
are forcing the reseed of the internal HW RNG so each single generated 64-bit value is guaranteed to be generated with differend seed of Intel RdRand's internal PRNG. The difference between these two functions is in approach: 
.BR rdrand_get_uint64_array_reseed_skip ()
is returning just one from each 1025 64-bits values (size of the inner pool is 1024 of such).
.BR rdrand_get_uint64_array_reseed_delay ()
is inserting small delays (20 microseconds) between each call, long enough so according of Intel, the inner pool should fully regenerate.
Unfortunately, because the HW implementation is closed, it is not possible to verify, if these two functions trully works like intended.

The last 
.BR rdrand_fwrite ()
function directly writes 
.I count
bytes of randomness to the 
.I *f
file descriptor.

.SH EXAMPLE

TODO

.SH SEE ALSO
rdrand-gen(7)
.SH BUGS
No known bugs.
.SH AUTHOR
Jan Tulak (jan@tulak.me)
Jiri Hladky (hladky.jiri@gmail.com)
